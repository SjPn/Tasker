// Generated by view binder compiler. Do not edit!
package com.noter.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.noter.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOverdueNoteBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final ImageButton expandNoteButton;

  @NonNull
  public final CheckBox noteCheckBox;

  @NonNull
  public final TextView noteDateTextView;

  @NonNull
  public final EditText noteEditText;

  private ItemOverdueNoteBinding(@NonNull MaterialCardView rootView,
      @NonNull ImageButton expandNoteButton, @NonNull CheckBox noteCheckBox,
      @NonNull TextView noteDateTextView, @NonNull EditText noteEditText) {
    this.rootView = rootView;
    this.expandNoteButton = expandNoteButton;
    this.noteCheckBox = noteCheckBox;
    this.noteDateTextView = noteDateTextView;
    this.noteEditText = noteEditText;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOverdueNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOverdueNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_overdue_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOverdueNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.expandNoteButton;
      ImageButton expandNoteButton = ViewBindings.findChildViewById(rootView, id);
      if (expandNoteButton == null) {
        break missingId;
      }

      id = R.id.noteCheckBox;
      CheckBox noteCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (noteCheckBox == null) {
        break missingId;
      }

      id = R.id.noteDateTextView;
      TextView noteDateTextView = ViewBindings.findChildViewById(rootView, id);
      if (noteDateTextView == null) {
        break missingId;
      }

      id = R.id.noteEditText;
      EditText noteEditText = ViewBindings.findChildViewById(rootView, id);
      if (noteEditText == null) {
        break missingId;
      }

      return new ItemOverdueNoteBinding((MaterialCardView) rootView, expandNoteButton, noteCheckBox,
          noteDateTextView, noteEditText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
